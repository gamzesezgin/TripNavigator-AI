"""
AI Destinasyon √ñnerici Mod√ºl√º
Gemini API kullanarak AI destekli destinasyon √∂nerileri olu≈üturur
"""

import os
import requests
import streamlit as st
from typing import List, Dict, Any

def get_gemini_api_key():
    """
    Gemini API anahtarƒ±nƒ± alƒ±r
    """
    # √ñnce environment variable'dan dene
    api_key = os.getenv('GEMINI_API_KEY')
    
    # Eƒüer yoksa Streamlit secrets'tan dene
    if not api_key:
        try:
            api_key = st.secrets["GEMINI_API_KEY"]
        except:
            pass
    
    return api_key

def call_gemini_api(prompt: str) -> Dict[str, Any]:
    """
    Gemini API'yi √ßaƒüƒ±rƒ±r
    """
    api_key = get_gemini_api_key()
    
    if not api_key:
        st.error("API anahtarƒ± bulunamadƒ±. L√ºtfen .env dosyasƒ±nƒ± ve kodunuzu kontrol edin.")
        return None
    
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"
    
    headers = {
        "Content-Type": "application/json",
    }
    
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.7,
            "topK": 40,
            "topP": 0.95,
            "maxOutputTokens": 1024,
        }
    }
    
    try:
        response = requests.post(
            f"{url}?key={api_key}",
            headers=headers,
            json=data,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"API hatasƒ±: {response.status_code} - {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        st.error("API'den cevap alƒ±namadƒ± (Zaman a≈üƒ±mƒ±). L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin veya daha sonra tekrar deneyin.")
        return None
    except requests.exceptions.RequestException as e:
        st.error(f"API isteƒüi sƒ±rasƒ±nda hata: {e}")
        return None

def generate_ai_destination_recommendation(answers: List[str], ai_questions: List[Dict[str, Any]]) -> List[Dict[str, str]]:
    """
    AI kullanarak destinasyon √∂nerisi olu≈üturur
    """
    print("ü§ñ AI Destinasyon √ñnerisi Ba≈ülatƒ±lƒ±yor...")
    
    # Kullanƒ±cƒ± tercihlerini analiz et
    preferences = {}
    
    for i, (question, answer) in enumerate(zip(ai_questions, answers)):
        question_text = question["question"]
        preferences[f"Soru {i+1}: {question_text}"] = answer
    
    # Mesafe tercihini belirle
    distance_preference = "Genel"
    for answer in answers:
        if "t√ºrkiye" in answer.lower():
            distance_preference = "T√ºrkiye i√ßi"
        elif "avrupa" in answer.lower() or "yakƒ±n" in answer.lower():
            distance_preference = "Avrupa (yakƒ±n)"
        elif "uzak" in answer.lower():
            distance_preference = "Uzak"
    
    # AI prompt'unu olu≈ütur
    prompt = f"""
Bu tercihlere g√∂re d√ºnyadaki en uygun 3 destinasyon √∂ner. 

√ñNEMLƒ∞: 
- Eƒüer "T√ºrkiye i√ßi" se√ßildiyse, SADECE T√ºrkiye i√ßi destinasyonlar √∂ner
- Eƒüer "Avrupa (yakƒ±n)" se√ßildiyse, SADECE Avrupa destinasyonlarƒ± √∂ner  
- Eƒüer "Uzak" se√ßildiyse, farklƒ± kƒ±talardan destinasyonlar √∂ner

Kullanƒ±cƒ± Tercihleri:
"""
    
    for key, value in preferences.items():
        prompt += f"- {key}: {value}\n"
    
    prompt += f"""
Mesafe Tercihi: {distance_preference}

L√ºtfen sadece 3 destinasyon √∂ner ve her biri i√ßin kƒ±sa bir a√ßƒ±klama ver.
Format:
1. [Destinasyon Adƒ±] - [Kƒ±sa A√ßƒ±klama]
2. [Destinasyon Adƒ±] - [Kƒ±sa A√ßƒ±klama]  
3. [Destinasyon Adƒ±] - [Kƒ±sa A√ßƒ±klama]

Sadece bu formatta yanƒ±t ver, ba≈üka a√ßƒ±klama ekleme.
"""
    
    print("üì§ AI'ya istek g√∂nderiliyor...")
    
    try:
        result = call_gemini_api(prompt)
        
        if result and 'candidates' in result and result['candidates']:
            content = result['candidates'][0]['content']['parts'][0]['text']
            
            # Debug i√ßin AI yanƒ±tƒ±nƒ± g√∂ster
            print(f"ü§ñ AI Yanƒ±tƒ±: {content}")
            
            # Yanƒ±tƒ± temizle
            content = content.strip()
            
            # Satƒ±rlara b√∂l
            lines = content.split('\n')
            
            destinations = []
            
            # Her satƒ±rƒ± kontrol et
            for line in lines:
                line = line.strip()
                
                # Bo≈ü satƒ±rlarƒ± atla
                if not line:
                    continue
                
                # Numaralƒ± satƒ±rlarƒ± kontrol et (1., 2., 3.)
                if line.startswith('1.') or line.startswith('2.') or line.startswith('3.'):
                    # Numarayƒ± kaldƒ±r ve temizle
                    clean_line = line[2:].strip()
                    
                    # Tire i≈üaretini bul
                    if ' - ' in clean_line:
                        parts = clean_line.split(' - ', 1)
                        if len(parts) == 2:
                            name = parts[0].strip()
                            description = parts[1].strip()
                            
                            destinations.append({
                                "name": name,
                                "description": description
                            })
                            print(f"‚úÖ AI'dan Bulunan Destinasyon: {name} - {description}")
            
            if len(destinations) >= 3:
                print("üéâ AI'dan 3 destinasyon ba≈üarƒ±yla alƒ±ndƒ±!")
                return destinations[:3]
            elif len(destinations) > 0:
                print(f"‚ö†Ô∏è AI'dan sadece {len(destinations)} destinasyon alƒ±ndƒ±, fallback ile tamamlanƒ±yor...")
                fallback_destinations = generate_fallback_destinations(answers, ai_questions, destinations)
                return fallback_destinations[:3]
            else:
                print("‚ùå AI'dan ge√ßerli destinasyon alƒ±namadƒ±, fallback sistemi devreye giriyor...")
                fallback_destinations = generate_fallback_destinations(answers, ai_questions, [])
                return fallback_destinations[:3]
        else:
            print("‚ùå AI'dan ge√ßerli yanƒ±t alƒ±namadƒ±, fallback sistemi devreye giriyor...")
            fallback_destinations = generate_fallback_destinations(answers, ai_questions, [])
            return fallback_destinations[:3]
            
    except Exception as e:
        print(f"‚ùå AI √∂nerisi alƒ±nƒ±rken hata: {e}")
        print("üîÑ Fallback sistemi devreye giriyor...")
        fallback_destinations = generate_fallback_destinations(answers, ai_questions, [])
        return fallback_destinations[:3]

def generate_fallback_destinations(answers: List[str], ai_questions: List[Dict[str, Any]], existing_destinations: List[Dict[str, str]]) -> List[Dict[str, str]]:
    """
    AI yanƒ±tƒ± alƒ±namadƒ±ƒüƒ±nda kullanƒ±cƒ± tercihlerine g√∂re 3 destinasyon √∂nerir
    """
    print("üîÑ Fallback sistemi: Kod i√ßi ≈üehir listesinden √∂neriler olu≈üturuluyor...")
    
    # Mevcut destinasyonlarƒ± kopyala
    destinations = existing_destinations.copy()
    
    # Kullanƒ±cƒ± tercihlerini analiz et
    preferences = {}
    for i, (question, answer) in enumerate(zip(ai_questions, answers)):
        question_text = question["question"].lower()
        answer_text = answer.lower()
        preferences[question_text] = answer_text
    
    # Mesafe tercihini belirle
    distance_preference = "genel"
    for answer in answers:
        if "t√ºrkiye" in answer.lower():
            distance_preference = "t√ºrkiye"
        elif "avrupa" in answer.lower() or "yakƒ±n" in answer.lower():
            distance_preference = "avrupa"
        elif "uzak" in answer.lower():
            distance_preference = "uzak"
    
    # T√ºrkiye i√ßi destinasyonlar
    if distance_preference == "t√ºrkiye":
        turkey_destinations = [
            {"name": "ƒ∞stanbul", "description": "Tarih, k√ºlt√ºr ve modern ya≈üam"},
            {"name": "Antalya", "description": "Plaj, tarih ve doƒüa"},
            {"name": "Kapadokya", "description": "Doƒüal g√ºzellikler ve tarih"},
            {"name": "ƒ∞zmir", "description": "Ege k√ºlt√ºr√º ve lezzetler"},
            {"name": "Bursa", "description": "Tarih ve termal kaplƒ±calar"},
            {"name": "Trabzon", "description": "Karadeniz doƒüasƒ± ve k√ºlt√ºr√º"},
            {"name": "Konya", "description": "Tasavvuf k√ºlt√ºr√º ve tarih"},
            {"name": "Gaziantep", "description": "Gastronomi ve tarih"},
            {"name": "Mardin", "description": "Tarihi mimari ve k√ºlt√ºr"},
            {"name": "Van", "description": "Doƒüa ve tarih"}
        ]
        
        # Kullanƒ±cƒ± tercihlerine g√∂re filtrele
        for dest in turkey_destinations:
            if len(destinations) >= 3:
                break
            if dest not in destinations:
                destinations.append(dest)
    
    # Avrupa destinasyonlarƒ±
    elif distance_preference == "avrupa":
        europe_destinations = [
            {"name": "Paris, Fransa", "description": "Sanat, k√ºlt√ºr ve romantizm"},
            {"name": "Roma, ƒ∞talya", "description": "Tarih, sanat ve gastronomi"},
            {"name": "Barcelona, ƒ∞spanya", "description": "Mimari, k√ºlt√ºr ve plaj"},
            {"name": "Amsterdam, Hollanda", "description": "K√ºlt√ºr, sanat ve kanallar"},
            {"name": "Prag, √áekya", "description": "Tarih, mimari ve biralar"},
            {"name": "Viyana, Avusturya", "description": "M√ºzik, sanat ve tarih"},
            {"name": "Budape≈üte, Macaristan", "description": "Tarih, spa ve k√ºlt√ºr"},
            {"name": "Atina, Yunanistan", "description": "Antik tarih ve deniz"},
            {"name": "Lizbon, Portekiz", "description": "Tarih, deniz ve lezzetler"},
            {"name": "Krakow, Polonya", "description": "Tarih, k√ºlt√ºr ve mimari"}
        ]
        
        for dest in europe_destinations:
            if len(destinations) >= 3:
                break
            if dest not in destinations:
                destinations.append(dest)
    
    # Uzak destinasyonlar
    elif distance_preference == "uzak":
        far_destinations = [
            {"name": "Tokyo, Japonya", "description": "Teknoloji, k√ºlt√ºr ve gastronomi"},
            {"name": "New York, ABD", "description": "≈ûehir hayatƒ±, sanat ve k√ºlt√ºr"},
            {"name": "Bangkok, Tayland", "description": "K√ºlt√ºr, lezzetler ve tapƒ±naklar"},
            {"name": "Singapur", "description": "Modern ≈üehir ve k√ºlt√ºr"},
            {"name": "Sydney, Avustralya", "description": "Doƒüa, plaj ve ≈üehir hayatƒ±"},
            {"name": "Cape Town, G√ºney Afrika", "description": "Daƒü ve deniz manzarasƒ±, tarih"},
            {"name": "Rio de Janeiro, Brezilya", "description": "Plaj, karnaval ve doƒüa"},
            {"name": "Mumbai, Hindistan", "description": "K√ºlt√ºr, tarih ve lezzetler"},
            {"name": "Mexico City, Meksika", "description": "Tarih, k√ºlt√ºr ve gastronomi"},
            {"name": "Dubai, BAE", "description": "Modern ≈üehir ve l√ºks"}
        ]
        
        for dest in far_destinations:
            if len(destinations) >= 3:
                break
            if dest not in destinations:
                destinations.append(dest)
    
    # Genel destinasyonlar
    else:
        general_destinations = [
            {"name": "ƒ∞stanbul, T√ºrkiye", "description": "Tarih, k√ºlt√ºr ve modern ya≈üam"},
            {"name": "Paris, Fransa", "description": "Sanat, k√ºlt√ºr ve romantizm"},
            {"name": "Roma, ƒ∞talya", "description": "Tarih, sanat ve gastronomi"},
            {"name": "Barcelona, ƒ∞spanya", "description": "Mimari, k√ºlt√ºr ve plaj"},
            {"name": "Tokyo, Japonya", "description": "Teknoloji, k√ºlt√ºr ve gastronomi"},
            {"name": "New York, ABD", "description": "≈ûehir hayatƒ±, sanat ve k√ºlt√ºr"},
            {"name": "Bangkok, Tayland", "description": "K√ºlt√ºr, lezzetler ve tapƒ±naklar"},
            {"name": "Amsterdam, Hollanda", "description": "K√ºlt√ºr, sanat ve kanallar"},
            {"name": "Prag, √áekya", "description": "Tarih, mimari ve biralar"},
            {"name": "Cape Town, G√ºney Afrika", "description": "Daƒü ve deniz manzarasƒ±, tarih"}
        ]
        
        for dest in general_destinations:
            if len(destinations) >= 3:
                break
            if dest not in destinations:
                destinations.append(dest)
    
    print(f"‚úÖ Fallback sistemi: {len(destinations[:3])} destinasyon √∂nerisi hazƒ±rlandƒ±")
    return destinations[:3]

def generate_recommendation_reasoning(answers: List[str], ai_questions: List[Dict[str, Any]], selected_destination: str) -> str:
    """
    Se√ßilen destinasyon i√ßin √∂neri gerek√ßesi olu≈üturur
    """
    # Basit gerek√ße olu≈üturma
    reasoning_parts = []
    
    for i, (question, answer) in enumerate(zip(ai_questions, answers)):
        question_text = question["question"]
        
        # Soru t√ºr√ºne g√∂re gerek√ße olu≈ütur
        if "b√ºt√ße" in question_text.lower():
            if "y√ºksek" in answer.lower() or "l√ºks" in answer.lower():
                reasoning_parts.append("L√ºks deneyimler i√ßin uygun")
            elif "orta" in answer.lower():
                reasoning_parts.append("Kaliteli ama ekonomik se√ßenekler")
            elif "d√º≈ü√ºk" in answer.lower():
                reasoning_parts.append("Ekonomik seyahat imkanlarƒ±")
        
        elif "aktivite" in question_text.lower() or "yoƒüunluk" in question_text.lower():
            if "yoƒüun" in answer.lower() or "aktif" in answer.lower():
                reasoning_parts.append("Yoƒüun aktivite programlarƒ±")
            elif "orta" in answer.lower() or "dengeli" in answer.lower():
                reasoning_parts.append("Dengeli aktivite se√ßenekleri")
            elif "rahat" in answer.lower() or "az" in answer.lower():
                reasoning_parts.append("Rahat ve dinlendirici aktiviteler")
        
        elif "k√ºlt√ºr" in question_text.lower() or "m√ºze" in question_text.lower():
            if "m√ºze" in answer.lower() or "tarih" in answer.lower():
                reasoning_parts.append("Zengin k√ºlt√ºrel miras")
            elif "yerel" in answer.lower():
                reasoning_parts.append("Otantik yerel deneyimler")
            elif "sanat" in answer.lower():
                reasoning_parts.append("Sanat ve k√ºlt√ºr odaklƒ±")
    
    if reasoning_parts:
        return f"{selected_destination} se√ßimi ≈üu tercihlerinize dayanmaktadƒ±r: {', '.join(reasoning_parts)}."
    else:
        return f"{selected_destination} se√ßimi genel seyahat tercihlerinize uygun olarak √∂nerilmi≈ütir."
